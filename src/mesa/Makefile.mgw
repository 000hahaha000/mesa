# Mesa 3-D graphics library
# Version:  5.1
# 
# Copyright (C) 1999-2003  Brian Paul   All Rights Reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# BRIAN PAUL BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# MinGW core makefile v1.2 for Mesa
#
#  Copyright (C) 2002 - Borca Daniel
#  Email : dborca@users.sourceforge.net
#  Web   : http://www.geocities.com/dborca


#
#  Available options:
#
#    Environment variables:
#	CFLAGS
#
#	GLIDE		path to Glide3 SDK; used with FX.
#			default = $(TOP)/glide3
#	FX=1		build for 3dfx Glide3. Note that this disables
#			compilation of most WMesa code and requires fxMesa.
#			As a consequence, you'll need the Win32 Glide3
#			library to build any application.
#			default = no
#	HAVE_X86=1	optimize for i386.
#			default = no
#	HAVE_MMX=1	allow MMX specializations, provided your assembler
#			supports MMX instruction set. However, the true CPU
#			capabilities are checked at run-time to avoid crashes.
#			default = no
#	HAVE_SSE=1	(see HAVE_MMX)
#			default = no
#	HAVE_3DNOW=1	(see HAVE_MMX)
#			default = no
#
#    Targets:
#	all:		build GL
#	clean:		remove object files
#



.PHONY: all clean
.INTERMEDIATE: x86/gen_matypes.exe
.SUFFIXES: .rc .res

TOP = ../..
GLIDE ?= $(TOP)/glide3
LIBDIR = $(TOP)/lib
GL_DLL = opengl32.dll
GL_IMP = libopengl32.a

LDLIBS = -lgdi32

CC = mingw32-gcc
CFLAGS += -DBUILD_GL32 -D_OPENGL32_ -D_MSC_VER
CFLAGS += -I$(TOP)/include -I. -Imain -Iglapi
ifeq ($(FX),1)
CFLAGS += -DH3
CFLAGS += -I$(GLIDE)/include -DFX
LDLIBS += -L$(GLIDE)/lib -lglide3x
GL_DEF = drivers/glide/fxopengl.def
GL_RES = drivers/glide/fx.rc
else
GL_DEF = drivers/windows/gdi/mesa.def
endif

AR = ar
ARFLAGS = rus

ifeq ($(wildcard $(addsuffix /rm.exe,$(subst ;, ,$(PATH)))),)
UNLINK = del $(subst /,\,$(1))
else
UNLINK = $(RM) $(1)
endif

include sources

X86_SOURCES = \
	x86/x86.c \
	x86/glapi_x86.S \
	x86/common_x86.c \
	x86/common_x86_asm.S \
	x86/x86_xform2.S \
	x86/x86_xform3.S \
	x86/x86_xform4.S \
	x86/x86_cliptest.S

MMX_SOURCES = \
	x86/mmx_blend.S

SSE_SOURCES = \
	x86/sse.c \
	x86/sse_xform2.S \
	x86/sse_xform3.S \
	x86/sse_xform4.S \
	x86/sse_normal.S

K3D_SOURCES = \
	x86/3dnow.c \
	x86/3dnow_xform2.S \
	x86/3dnow_xform3.S \
	x86/3dnow_xform4.S \
	x86/3dnow_normal.S

CORE_SOURCES = \
	$(MAIN_SOURCES) \
	$(GLAPI_SOURCES) \
	$(MATH_SOURCES) \
	$(ARRAY_CACHE_SOURCES) \
	$(TNL_SOURCES) \
	$(SWRAST_SOURCES) \
	$(SWRAST_SETUP_SOURCES)

ifeq ($(HAVE_MMX),1)
X86_SOURCES += $(MMX_SOURCES)
CFLAGS += -DUSE_MMX_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_SSE),1)
X86_SOURCES += $(SSE_SOURCES)
CFLAGS += -DUSE_SSE_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_3DNOW),1)
X86_SOURCES += $(K3D_SOURCES)
CFLAGS += -DUSE_3DNOW_ASM
HAVE_X86 = 1
endif
ifeq ($(HAVE_X86),1)
CFLAGS += -DUSE_X86_ASM
else
X86_SOURCES =
endif

ifeq ($(FX),1)
DRIVER_SOURCES = \
	drivers/glide/fxapi.c \
	drivers/glide/fxdd.c \
	drivers/glide/fxddspan.c \
	drivers/glide/fxddtex.c \
	drivers/glide/fxsetup.c \
	drivers/glide/fxtexman.c \
	drivers/glide/fxtris.c \
	drivers/glide/fxvb.c \
	drivers/glide/fxglidew.c \
	drivers/glide/fxg.c \
	drivers/glide/fxwgl.c
else
DRIVER_SOURCES = \
	drivers/windows/gdi/wmesa.c \
	drivers/windows/gdi/wgl.c
endif

SOURCES = $(CORE_SOURCES) $(X86_SOURCES) $(COMMON_DRIVER_SOURCES) $(DRIVER_SOURCES)

OBJECTS = $(addsuffix .o,$(basename $(SOURCES)))

X86_OBJECTS = $(addsuffix .o,$(basename $(X86_SOURCES)))

RESOURCE = $(GL_RES:.rc=.res)

.c.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.S.o:
	$(CC) -o $@ $(CFLAGS) -c $<
.s.o:
	$(CC) -o $@ $(CFLAGS) -x assembler-with-cpp -c $<
.rc.res:
	windres -o $@ -Irc -Ocoff $<

all: $(LIBDIR)/$(GL_DLL) $(LIBDIR)/$(GL_IMP)

$(LIBDIR)/$(GL_DLL) $(LIBDIR)/$(GL_IMP): $(OBJECTS) $(RESOURCE)
	dllwrap -o $(LIBDIR)/$(GL_DLL) --output-lib $(LIBDIR)/$(GL_IMP) --target i386-mingw32 --def $(GL_DEF) $^ $(LDLIBS)

$(X86_OBJECTS): x86/matypes.h

x86/matypes.h: x86/gen_matypes.exe
	$(subst /,\,$< > $@)

x86/gen_matypes.exe: x86/gen_matypes.c
	$(CC) -o $@ $(CFLAGS) -s $<

# [dBorca] Hack alert:
# glapi_x86.S needs some adjustments
# in order to generate correct entrypoints
x86/glapi_x86.o: x86/glapi_x86.S
	$(CC) -o $@ $(CFLAGS) -U__WIN32__ -DSTDCALL_API -c $<
#main/dispatch.o: main/dispatch.c
#	$(CC) -o $@ $(CFLAGS) -UUSE_X86_ASM -c $<

clean:
	-$(call UNLINK,array_cache/*.o)
	-$(call UNLINK,glapi/*.o)
	-$(call UNLINK,main/*.o)
	-$(call UNLINK,math/*.o)
	-$(call UNLINK,swrast/*.o)
	-$(call UNLINK,swrast_setup/*.o)
	-$(call UNLINK,tnl/*.o)
	-$(call UNLINK,x86/*.o)
	-$(call UNLINK,drivers/windows/gdi/*.o)
	-$(call UNLINK,drivers/glide/*.o)
	-$(call UNLINK,drivers/glide/*.res)
