# Copyright (c) 2014 Intel Corporation

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

""" Module providing tests for the core module """


import os
import tempfile
import collections
import json
import framework.tests.utils as utils
import framework.core as core


def check_initialize(target):
    """ Check that a class initializes without error """
    func = target()
    # Asserting that func exists will fail for Group and TestrunResult which
    # are dict subclasses
    assert isinstance(func, target)


def test_generate_initialize():
    """ Generator that creates tests to initialize all of the classes in core

    In a compiled language the compiler provides this kind of checking, but in
    an interpreted language like python you don't have a compiler test. The
    unit tests generated by this function serve as a similar test, does this
    even work?

    """
    yieldable = check_initialize

    for target in [core.TestProfile, core.Group, core.Test, core.Environment,
                   core.TestrunResult, core.TestResult,
                   core.PiglitJSONEncoder]:
        yieldable.description = "Test that {} initializes".format(
            target.__name__)
        yield yieldable, target


def test_initialize_jsonwriter():
    """ Test that JSONWriter initializes

    This needs to be handled separately from the others because it requires
    arguments

    """
    with tempfile.TemporaryFile() as tfile:
        func = core.JSONWriter(tfile)
        assert isinstance(func, core.JSONWriter)


def test_parse_listfile_return():
    """ Test that parse_listfile returns a container

    Given a file with a newline seperated list of results, parse_listfile
    should return a list of files with no whitespace

    """
    contents = "/tmp/foo\n/tmp/bar\n"

    with utils.with_tempfile(contents) as tfile:
        results = core.parse_listfile(tfile)

    assert isinstance(results, collections.Container)


def check_whitespace(actual, base, message):
    """ check that the string has not trailing whitespace """
    assert base == actual, message


def test_parse_listfile_whitespace():
    """ Test that parse_listfile remove whitespace """
    contents = "/tmp/foo\n/tmp/foo  \n/tmp/foo\t\n"

    with utils.with_tempfile(contents) as tfile:
        results = core.parse_listfile(tfile)

    yld = check_whitespace

    # Test for newlines
    yld.description = ("Test that trailing newlines are removed by "
                       "parse_listfile")
    yield yld, results[0], "/tmp/foo", "Trailing newline not removed!"

    # test for normal spaces
    yld.description = "Test that trailing spaces are removed by parse_listfile"
    yield yld, results[1], "/tmp/foo", "Trailing spaces not removed!"

    # test for tabs
    yld.description = "Test that trailing tabs are removed by parse_listfile"
    yield yld, results[2], "/tmp/foo", "Trailing tab not removed!"


def test_parse_listfile_tilde():
    """ Test that parse_listfile properly expands tildes

    According to the python docs for python 2.7
    (http://docs.python.org/2/library/os.path.html#module-os.path), both
    os.path.expanduser and os.path.expandvars work on both *nix systems (Linux,
    *BSD, OSX) and Windows.

    """
    contents = "~/foo\n"

    with utils.with_tempfile(contents) as tfile:
        results = core.parse_listfile(tfile)

    assert results[0] == os.path.expandvars("$HOME/foo")


def test_load_results_folder():
    """ Test that load_results takes a folder with a file named main in it """
    with utils.tempdir() as tdir:
        with open(os.path.join(tdir, 'main'), 'w') as tfile:
            tfile.write(json.dumps(utils.JSON_DATA))

        results = core.load_results(tdir)
        assert results


def test_load_results_file():
    """ Test that load_results takes a file """
    with utils.resultfile() as tfile:
        results = core.load_results(tfile.name)
        assert results
