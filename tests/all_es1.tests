#!/usr/bin/env python
# -*- coding: utf-8 -*-
# All GLESv1 tests that come with piglit, using default settings

import re

from framework.core import *
from framework.exectest import *

######
# Collecting all tests
profile = TestProfile()

spec = Group()

# Group oes_compressed_etc1_rgb8_texture
oes_compressed_etc1_rgb8_texture = Group()
spec['OES_compressed_ETC1_RGB8_texture'] = oes_compressed_etc1_rgb8_texture
oes_compressed_etc1_rgb8_texture['basic'] = PlainExecTest(['oes_compressed_etc1_rgb8_texture-basic', '-auto'])
oes_compressed_etc1_rgb8_texture['basic'].runConcurrent = True

# Group OES_compressed_paletted_texture
oes_compressed_paletted_texture = Group()
spec['OES_compressed_paletted_texture'] = oes_compressed_paletted_texture
oes_compressed_paletted_texture['basic API'] = PlainExecTest(['oes_compressed_paletted_texture-api', '-auto'])
oes_compressed_paletted_texture['basic API'].runConcurrent = True

# Group OES_draw_texture
oes_draw_texture = Group()
spec['OES_draw_texture'] = oes_draw_texture
oes_draw_texture['oes_draw_texture'] = PlainExecTest(['oes_draw_texture', '-auto'])
oes_draw_texture['oes_draw_texture'].runConcurrent = True

profile.tests['spec'] = spec

#############
# Some Mesa diagnostic messages that we should probably ignore
Test.ignoreErrors.append(re.compile("couldn't open libtxc_dxtn.so"))
Test.ignoreErrors.append(re.compile("compression/decompression available"))
Test.ignoreErrors.append(re.compile("Mesa: .*build"))
Test.ignoreErrors.append(re.compile("Mesa: CPU.*"))
Test.ignoreErrors.append(re.compile("Mesa: .*cpu detected."))
Test.ignoreErrors.append(re.compile("Mesa: Test.*"))
Test.ignoreErrors.append(re.compile("Mesa: Yes.*"))
Test.ignoreErrors.append(re.compile("libGL: XF86DRIGetClientDriverName.*"))
Test.ignoreErrors.append(re.compile("libGL: OpenDriver: trying.*"))
Test.ignoreErrors.append(re.compile("libGL: Warning in.*drirc*"))
Test.ignoreErrors.append(re.compile("ATTENTION.*value of option.*"))
Test.ignoreErrors.append(re.compile("drmOpen.*"))
Test.ignoreErrors.append(re.compile("Mesa: Not testing OS support.*"))
Test.ignoreErrors.append(re.compile("Mesa: User error:.*"))
Test.ignoreErrors.append(re.compile("Mesa: Initializing .* optimizations"))
Test.ignoreErrors.append(re.compile("debug_get_.*"))
Test.ignoreErrors.append(re.compile("util_cpu_caps.*"))
Test.ignoreErrors.append(re.compile("Mesa: 3Dnow! detected"))
Test.ignoreErrors.append(re.compile("r300:.*"))
Test.ignoreErrors.append(re.compile("radeon:.*"))
Test.ignoreErrors.append(re.compile("Warning:.*"))
Test.ignoreErrors.append(re.compile("0 errors, .*"))
Test.ignoreErrors.append(re.compile("Mesa.*"))
Test.ignoreErrors.append(re.compile("no rrb"))
Test.ignoreErrors.append(re.compile("; ModuleID.*"))
Test.ignoreErrors.append(re.compile("%.*"))
Test.ignoreErrors.append(re.compile(".*failed to translate tgsi opcode.*to SSE"))
Test.ignoreErrors.append(re.compile(".*falling back to interpreter"))
Test.ignoreErrors.append(re.compile("GLSL version is .*, but requested version .* is required"))
Test.ignoreErrors.append(re.compile("kCGErrorIllegalArgument: CGSOrderWindowList"))
Test.ignoreErrors.append(re.compile("kCGErrorFailure: Set a breakpoint @ CGErrorBreakpoint\(\) to catch errors as they are logged."))
Test.ignoreErrors.append(re.compile("stw_(init|cleanup).*"))
Test.ignoreErrors.append(re.compile("OpenGLInfo..*"))
Test.ignoreErrors.append(re.compile("AdapterInfo..*"))
Test.ignoreErrors.append(re.compile("No memory leaks detected."))
