# Some compilers may try to optimize comparisons based on the expected
# range of the sources.  Check that pessimal cases are handled correctly.
#
# See also https://bugs.freedesktop.org/show_bug.cgi?id=111308

[require]
GLSL >= 1.20

[vertex shader passthrough]

[fragment shader]
#version 120

uniform float base;
uniform float power;
uniform bool expect_non_zero;

void main(void)
{
    float result = pow(base, power);

    gl_FragColor = expect_non_zero == (0 < result)
	? vec4(0.0, 1.0, 0.0, 1.0)
	: vec4(1.0, 0.0, 0.0, 1.0);
}

[test]
uniform float base 2
uniform float power 0
uniform int expect_non_zero 1
draw rect -1 -1 1 1

# Smallest possible subnormal number is 2**-149.  If someone has a
# representation that has more exponent, this case may incorrectly fail.
uniform float base 2
uniform float power -150
uniform int expect_non_zero 0
draw rect 0 -1 1 1

# Be very careful here... GLSL 1.20 has very low requirements for
# precision of calculations.  GLSL ES 1.00, for example, only requires
# 2**-61.  Specify a number slightly larger than that to ensure the
# hardware doesn't flush to zero.  Smallest possible subnormal number
# is 2**-149.  If someone has a representation that has more exponent,
# this case may incorrectly fail.
#
# Note: 2**(-150) = (2**(-61))**2.459
uniform float base 0.000000000000000000433681
uniform float power 2.459
uniform int expect_non_zero 0
draw rect -1 0 1 1

# Like the previous case, but use 2**61 and a much larger negative
# exponent.
#
# Note: 2**(-150) = (2**(-61))**2.459
uniform float base 2305843009213693952
uniform float power -2.459
uniform int expect_non_zero 0
draw rect 0 0 1 1

probe all rgba 0.0 1.0 0.0 1.0
