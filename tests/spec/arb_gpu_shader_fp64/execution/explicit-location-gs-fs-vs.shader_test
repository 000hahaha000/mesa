# test truncating a double holds precision using explicit locations.
[require]
GLSL >= 1.50
GL_ARB_gpu_shader_fp64
GL_ARB_separate_shader_objects

[vertex shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
#extension GL_ARB_separate_shader_objects : require

uniform dvec4 arg0;

in vec4 vertex;
layout(location = 0) out vec4 vertex_to_gs;
layout(location = 1) out dvec4 dout1_to_gs;

void main()
{
	vertex_to_gs = vertex;
	dout1_to_gs = arg0;
}

[geometry shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
#extension GL_ARB_separate_shader_objects : require

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

layout(location = 0) in vec4 vertex_to_gs[3];
layout(location = 1) in dvec4 dout1_to_gs[3];
layout(location = 3) flat out dvec4 out_to_fs;

void main()
{
	for (int i = 0; i < 3; i++) {
		gl_Position = vertex_to_gs[i];
		out_to_fs = dout1_to_gs[i];
		EmitVertex();
	}
}

[fragment shader]
#version 150
#extension GL_ARB_gpu_shader_fp64 : require
#extension GL_ARB_separate_shader_objects : require

uniform double tolerance;
uniform dvec4 expected;

layout(location = 3) flat in dvec4 out_to_fs;
out vec4 color;

void main()
{
	dvec4 result = trunc(out_to_fs);
	color = distance(result, dvec4(expected)) <= tolerance
		? vec4(0.0, 1.0, 0.0, 1.0) : vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
vertex/float/2
-1.0 -1.0
 1.0 -1.0
 1.0  1.0
-1.0  1.0

[test]
clear color 0.0 0.0 0.0 0.0

clear
uniform dvec4 arg0 1.7976931348623157E+308 1.5 -1.5 -0.5
uniform dvec4 expected 1.7976931348623157E+308 1.0 -1.0 0.0
uniform double tolerance 2.0000000000000002e-05
draw arrays GL_TRIANGLE_FAN 0 4
probe rgba 0 0 0.0 1.0 0.0 1.0
