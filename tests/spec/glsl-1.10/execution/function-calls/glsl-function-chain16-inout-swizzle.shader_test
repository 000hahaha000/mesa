# This tests we inline functions correctly. Chaining the functions helps
# us reach the GLSL IR -> NIR code with some functions intact when the
# conservative optimise flag is set in Mesa. This allows us to test the
# GLSL IR -> NIR conversion code for functions and the NIR function inlining
# code.
[require]
GLSL >= 1.10

[vertex shader]
void main()
{
	gl_Position = gl_Vertex;
}

[fragment shader]
void f01(inout vec4 f);
void f02(inout vec4 f);
void f06(inout vec4 f);
void f10(inout vec4 f);
void f14(inout vec4 f);
void main()
{
	vec4 g = vec4(0.1, 0, 0, 1.0);
	f01(g);
	gl_FragColor = g;
}
void f01(inout vec4 f) {f02(f);}
void f05(inout vec4 f) {f06(f);}
void f09(inout vec4 f) {f10(f);}
void f13(inout vec4 f) {f14(f);}

[fragment shader]
void f03(inout vec4 f);
void f07(inout vec4 f);
void f11(inout vec4 f);
void f15(inout vec4 f);
void f02(inout vec4 f) {f03(f);}
void f06(inout vec4 f) {f07(f);}
void f10(inout vec4 f) {f11(f);}
void f14(inout vec4 f) {f15(f);}

[fragment shader]
void f04(inout vec4 f);
void f08(inout vec4 f);
void f12(inout vec4 f);
void f16(inout float f);
void f03(inout vec4 f) {f04(f);}
void f07(inout vec4 f) {f08(f);}
void f11(inout vec4 f) {f12(f);}
void f15(inout vec4 f) {f16(f.x);}

[fragment shader]
void f05(inout vec4 f);
void f09(inout vec4 f);
void f13(inout vec4 f);
void f04(inout vec4 f) {f05(f);}
void f08(inout vec4 f) {f09(f);}
void f12(inout vec4 f) {f13(f);}
void f16(inout float f) {f+=0.1;}


[test]
draw rect -1 -1 2 2
probe all rgba 0.2 0 0 1.0
