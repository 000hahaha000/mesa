# This tests unrolling of a loop with a single exit point but where the
# exact trip count is unknown, only the max iteration count (4) is known.
#
# Here we test all possible outcomes for the loop and also add some
# unreachable code to make sure it is not accessible after unrolling.
[require]
GLSL >= 1.10

[vertex shader]
uniform int loop_count;

void main()
{
  gl_Position = gl_Vertex;

  vec4 colour = vec4(1.0, 1.0, 1.0, 1.0);

  int i = 0;
  int x = 0;
  while (x < loop_count && i < 4) {
    if (x == 0 && i == 0)
      colour = vec4(0.0, 0.25, 0.0, 1.0);

    if (x == 2 && i == 1)
      colour = vec4(0.0, 0.5, 0.0, 1.0);

    if (x == 4 && i == 2)
      colour = vec4(0.0, 0.75, 0.0, 1.0);

    if (x == 6 && i == 3)
      colour = vec4(0.0, 1.0, 0.0, 1.0);

    /* This should be unreachable */
    if (x >= 8 || i >= 4)
      colour = vec4(1.0, 0.0, 0.0, 1.0);

    i++;
    x+=2;
  }

  gl_FrontColor = colour;
}

[fragment shader]
void main()
{
  gl_FragColor = gl_Color;
}

[test]
clear color 0.5 0.5 0.5 0.5

uniform int loop_count 0
draw rect -1 -1 2 2
probe all rgba 1.0 1.0 1.0 1.0

uniform int loop_count 2
draw rect -1 -1 2 2
probe all rgba 0.0 0.25 0.0 1.0

uniform int loop_count 4
draw rect -1 -1 2 2
probe all rgba 0.0 0.5 0.0 1.0

uniform int loop_count 6
draw rect -1 -1 2 2
probe all rgba 0.0 0.75 0.0 1.0

uniform int loop_count 8
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0

uniform int loop_count 10
draw rect -1 -1 2 2
probe all rgba 0.0 1.0 0.0 1.0
