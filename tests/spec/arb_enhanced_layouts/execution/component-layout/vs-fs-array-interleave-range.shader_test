# Test for successful interleaving of components in two arrays with different
# location ranges between vertex and fragment shaders.

[require]
GLSL >= 1.40
GL_ARB_enhanced_layouts
GL_ARB_separate_shader_objects

[vertex shader]
#version 140
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require

// YZ components of 0..3
layout(location = 0, component = 1) out vec2 a[4];

// W component of 2..5
layout(location = 2, component = 3) out float b[4];

// W component of 1
layout(location = 1, component = 3) out float c;

// X component of 2
layout(location = 2, component = 0) out float d;

in vec4 piglit_vertex;

uniform vec2 a0 = vec2(0.0, 1.0);
uniform vec2 a1 = vec2(2.0, 3.0);
uniform vec2 a2 = vec2(4.0, 5.0);
uniform vec2 a3 = vec2(6.0, 7.0);
uniform float b0 = 8.0;
uniform float b1 = 9.0;
uniform float b2 = 10.0;
uniform float b3 = 11.0;
uniform float c0 = 12.0;
uniform float d0 = 13.0;

void main()
{
  a[0] = a0;
  a[1] = a1;
  a[2] = a2;
  a[3] = a3;
  b[0] = b0;
  b[1] = b1;
  b[2] = b2;
  b[3] = b3;
  c = c0;
  d = d0;

  gl_Position = piglit_vertex;
}

[fragment shader]
#version 140
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require

out vec4 color;

// YZ components of 0..3
layout(location = 0, component = 1) in vec2 a[4];

// W component of 2..5
layout(location = 2, component = 3) in float b[4];

// W component of 1
layout(location = 1, component = 3) in float c;

// X component of 2
layout(location = 2, component = 0) in float d;

uniform int four = 4;

void main()
{
  for (int i = 0; i < four; ++i) {
    if (a[i].x != 2.0 * i) {
      color = vec4(1, 0, i * 0.1, a[i].x * 0.1);
      return;
    }
    if (a[i].y != 2.0 * i + 1.0) {
      color = vec4(1, 0.25, i * 0.1, a[i].y * 0.1);
      return;
    }
    if (b[i] != 8.0 + float(i)) {
      color = vec4(1, 0.5, i * 0.1, b[i] * 0.1);
      return;
    }
  }
  if (c != 12.0) {
    color = vec4(1, 0.75, 0, c * 0.1);
    return;
  }
  if (d != 13.0) {
    color = vec4(1, 1, 0, d * 0.1);
    return;
  }
  color = vec4(0, 1, 0, 1);
}

[test]
draw rect -1 -1 2 2
probe all rgba 0 1 0 1
