// From Section 4.4.1 (Input Layout Qualifiers) of the GLSL 4.50 spec:
//
//    "Location aliasing is causing two variables or block members to have the
//    same location number. Component aliasing is assigning the same (or
//    overlapping) component numbers for two location aliases. (Recall if
//    component is not used, components are assigned starting with 0.) With
//    one exception, location aliasing is allowed only if it does not cause
//    component aliasing; it is a compile-time or link-time error to cause
//    component aliasing. Further, when location aliasing, the aliases
//    sharing the location must have the same underlying numerical type
//    (floating-point or integer) and the same auxiliary storage and
//    interpolation qualification."

[require]
GLSL >= 1.50
GL_ARB_enhanced_layouts
GL_ARB_separate_shader_objects

[vertex shader]
#version 150
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require

layout(location = 0) out block {
	vec4 a;
	layout(location = 1) float f1;
	float f2;
	layout(location = 2) float f3; // ERROR: Location 2 used by f2
} name;

void main()
{
	name.a = vec4(1.0);
	name.f1 = 0.0;
	name.f2 = 1.0;
	name.f3 = 1.0;
}

[fragment shader]
#version 150
#extension GL_ARB_enhanced_layouts: require
#extension GL_ARB_separate_shader_objects: require

layout(location = 0) in block {
	vec4 a;
	layout(location = 1) float f1;
	float f2;
	layout(location = 2) float f3; // ERROR: Location 2 used by f2
} name;

out vec4 color;

void main()
{
	color = vec4(name.f1 + name.a.x, name.f2 + name.a.y,
			name.f3 + name.a.z, name.a.w);
}

[test]
link error
