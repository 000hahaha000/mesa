[require]
GLSL >= 1.50
GL_ARB_tessellation_shader
GL_ARB_gpu_shader_fp64

[vertex shader]
in vec4 vertex;

void main()
{
	gl_Position = vertex;
}


[tessellation control shader]
#extension GL_ARB_tessellation_shader: require
#extension GL_ARB_gpu_shader_fp64: require
layout(vertices = 3) out;

out block {
	dvec4 tcs_var0[4];
} blk[];

void main() {
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	gl_TessLevelOuter = float[4](1.0, 1.0, 1.0, 0.0);
	gl_TessLevelInner = float[2](0.0, 0.0);
	blk[gl_InvocationID].tcs_var0[0] = dvec4(1.0LF, 0.0LF, 0.0LF, 1.0LF);
	blk[gl_InvocationID].tcs_var0[1] = dvec4(0.0LF, 1.0LF, 0.0LF, 1.0LF);
	blk[gl_InvocationID].tcs_var0[2] = dvec4(0.0LF, 0.0LF, 1.0LF, 1.0LF);
	blk[gl_InvocationID].tcs_var0[3] = dvec4(1.0LF, 1.0LF, 0.0LF, 1.0LF);
}


[tessellation evaluation shader]
#extension GL_ARB_tessellation_shader: require
#extension GL_ARB_gpu_shader_fp64: require
layout(triangles) in;

uniform int index;
in block {
	dvec4 tcs_var0[4];
} blk[];

out vec4 color;

void main() {
	gl_Position = gl_in[0].gl_Position * gl_TessCoord[0]
	            + gl_in[1].gl_Position * gl_TessCoord[1]
	            + gl_in[2].gl_Position * gl_TessCoord[2];

	color = vec4(blk[0].tcs_var0[index]);
}


[fragment shader]
#extension GL_ARB_gpu_shader_fp64: require
in vec4 color;

void main()
{
    gl_FragColor = color;
}

[vertex data]
vertex/float/2
-1.0 -1.0
 1.0 -1.0
-1.0  1.0
-1.0  1.0
 1.0 -1.0
 1.0  1.0

[test]
clear color 0.1 0.1 0.1 0.1
clear
patch parameter vertices 3

uniform int index 0
draw arrays GL_PATCHES 0 6
probe all rgba 1.0 0.0 0.0 1.0

uniform int index 1
draw arrays GL_PATCHES 0 6
probe all rgba 0.0 1.0 0.0 1.0

uniform int index 2
draw arrays GL_PATCHES 0 6
probe all rgba 0.0 0.0 1.0 1.0

uniform int index 3
draw arrays GL_PATCHES 0 6
probe all rgba 1.0 1.0 0.0 1.0
