# Number of input CP = 16
# Number of output CP = 1
# Draw 256 patches. (4K vertices)
#
# Each patch is tessellated like a quad with a 4x4 vertex pattern.
# (which is 3x3 sub-quads = 18 triangles)

[require]
GLSL >= 1.50
GL_ARB_tessellation_shader

[vertex shader]
#version 150

out vec3 inpos;

void main()
{
  const int num = 16; // number of patches in one direction, num*num patches in total
  int patch_id = gl_VertexID / 16;
  int vertex_id = gl_VertexID % 16;

  inpos.xy = vec2(patch_id % num, patch_id / num) / num +
             vec2(vertex_id % 4, vertex_id / 4) / (3 * num);
  inpos.z = float(patch_id / 64);
}

[tessellation control shader]
#version 150
#extension GL_ARB_tessellation_shader : require
#extension GL_ARB_arrays_of_arrays : require

layout(vertices = 1) out;
in vec3 inpos[];
out vec3 outpos[][16];

void main()
{
  gl_TessLevelInner[0] =
  gl_TessLevelInner[1] =
  gl_TessLevelOuter[0] =
  gl_TessLevelOuter[1] =
  gl_TessLevelOuter[2] =
  gl_TessLevelOuter[3] = 3.0;

  for (int i = 0; i < 16; i++)
    outpos[gl_InvocationID][i] = inpos[i];
}

[tessellation evaluation shader]
#version 150
#extension GL_ARB_tessellation_shader : require
#extension GL_ARB_arrays_of_arrays : require

layout(quads, equal_spacing) in;
in vec3 outpos[][16];
out vec3 color;

void main()
{
  ivec2 coord = ivec2(round(gl_TessCoord.xy * 3));
  vec3 v = outpos[0][coord.y * 4 + coord.x];
  gl_Position = vec4(v.xy * 2 - 1, 0, 1);
  color = v.zzz - vec3(0, 1, 2);
}

[fragment shader]
#version 150

in vec3 color;

void main()
{
  gl_FragColor = vec4(color, 1);
}

[test]
clear color 0.1 0.1 0.1 0.1
clear
patch parameter vertices 16
draw arrays GL_PATCHES 0 4096
relative probe rect rgba (0, 0,    1, 0.24) (0, 0, 0, 1)
relative probe rect rgba (0, 0.26, 1, 0.24) (1, 0, 0, 1)
relative probe rect rgba (0, 0.5,  1, 0.24) (1, 1, 0, 1)
relative probe rect rgba (0, 0.76, 1, 0.24) (1, 1, 1, 1)
