# Verify simple usage of the barrier function

[require]
GL >= 3.3
GLSL >= 3.30
GL_ARB_compute_shader
GL_ARB_shader_image_load_store

[compute shader]
#version 330
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_image_load_store: enable

writeonly uniform image2D tex;

layout(local_size_x = 8, local_size_y = 8) in;

shared bool passed;
const uint size2 = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
shared uint data[size2];

void main()
{
	passed = true;
	barrier();

	// Fill shared array with data
	data[gl_LocalInvocationIndex] = gl_LocalInvocationIndex;
	barrier();

	// Check the data of the another invocation within the local group
	uint expect = (gl_LocalInvocationIndex + (size2 >> 1u)) % size2;
	if (data[expect] != expect) {
		passed = false;
	}
	barrier();

	vec4 color;
	if (passed) {
		color = vec4(0, 1, 0, 0);
	} else {
		color = vec4(1, 0, 0, 0);
	}

	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	imageStore(tex, coord, color);
}

[test]
uniform int tex 0
texture rgbw 0 (16, 16)
image texture 0
fb tex 2d 0

compute 2 2 1
probe all rgba 0.0 1.0 0.0 0.0
