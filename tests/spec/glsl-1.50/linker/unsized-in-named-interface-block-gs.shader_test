# Test that when an interface block contains members which are unsized
# arrays, the standard rules are applied in order to determine the
# array sizes (namely, the sizes should be inferred from the maximum
# array element accessed).
#
# In this test, there is a vertex shader output which uses an array
# size of 3, and a geometry shader input that uses an array size of 2,
# so link error should be produced.

[require]
GLSL >= 1.50

[vertex shader]
#version 150
in vec4 piglit_vertex;
out blk {
  float foo[];
} ifc_name;

void main()
{
  ifc_name.foo[0] = 0.0;
  ifc_name.foo[1] = 0.0;
  ifc_name.foo[2] = 0.0;
  gl_Position = piglit_vertex;
}

[geometry shader]
#version 150
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
in blk {
  float foo[];
} ifc_name[];
out vec2 bar;

void main()
{
  for (int i = 0; i < 3; i++) {
    gl_Position = gl_in[i].gl_Position;
    bar = vec2(ifc_name[i].foo[0], ifc_name[i].foo[1]);
    EmitVertex();
  }
}

[fragment shader]
#version 150
in vec2 bar;

void main()
{
  gl_FragColor = vec4(bar, 0.0, 1.0);
}

[test]
link error
