# This test checks that values sent to gl_ClipDistance by the vertex
# shader are correctly received by the geometry shader.

[require]
GL >= 2.0
GLSL >= 1.50

[vertex shader]
#version 150

in vec4 vertex;
in float offset;
out float offset_to_gs;
out gl_PerVertex {
  vec4 gl_Position;
  float gl_ClipDistance[gl_MaxClipDistances];
};

void main()
{
  gl_Position = vertex;
  offset_to_gs = offset;
  for (int i = 0; i < gl_MaxClipDistances; i++) {
    gl_ClipDistance[i] = offset + float(i);
  }
}

[geometry shader]
#version 150

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in float offset_to_gs[3];
in gl_PerVertex {
  vec4 gl_Position;
  float gl_ClipDistance[gl_MaxClipDistances];
} gl_in[];
flat out int ok_to_fs;

void main()
{
  bool ok = true;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < gl_MaxClipDistances; j++) {
      if (gl_in[i].gl_ClipDistance[j] != offset_to_gs[i] + float(j))
        ok = false;
    }
  }
  for (int i = 0; i < 3; i++) {
    gl_Position = gl_in[i].gl_Position;
    ok_to_fs = int(ok);
    EmitVertex();
  }
}

[fragment shader]
#version 150

flat in int ok_to_fs;

void main()
{
  if (ok_to_fs != 0)
    gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
  else
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
vertex/float/2  offset/float/1
-1.0 -1.0       1.0
 1.0 -1.0       2.0
 1.0  1.0       3.0
-1.0  1.0       4.0

[test]
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgba 0.0 1.0 0.0 1.0
