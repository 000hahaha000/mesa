#Test bounds checking of 2d array indexing.
#Also test length validation of the inner array of 2d arrays.
[require]
GL >= 2.0
GLSL >= 1.20
GL_ARB_geometry_shader4

[vertex shader]
#version 120

attribute vec4 vertex;

varying float gs_input1[1];
varying float gs_input4[4];

void main()
{
	gs_input1[0] = 0.5;
	for (int i = 0; i < 4; i++)
		gs_input4[i] = 0.5;
	gl_Position = vertex;
}

[geometry shader]
#version 120
#extension GL_ARB_geometry_shader4: enable

varying in float gs_input1[3][1];
varying in float gs_input4[3][4];

varying out vec4 gs_out;

void main()
{
	/* Constant indexing of arrays with known size should do a bounds check.
	 * The bounds check on these to operations would fail if the compiler
	 * checked the index against the wrong array dimension.
	 */
	float s1 = gs_input1[1][0];
	float s2 = gs_input4[0][3];

	/* Assignment operations of arrays should fail if the arrays don't have
	 * the same size.
	 * The assignment operations would fail if the compiler incorrectly
	 * compared the size of the local arrays a* (1 and 4, respectively) to
	 * the size of the outer dimension of the input arrays gs_input* (3).
	 */
	float a1[1] = gs_input1[0];
	float a4[4] = gs_input4[0];

	for (int i = 0; i < gl_VerticesIn; i++) {
		gs_out = vec4(s1, s2, a1[0], a4[0]);

		gl_Position = gl_PositionIn[i];
		EmitVertex();
	}
}

[geometry layout]
input type GL_TRIANGLES
output type GL_TRIANGLE_STRIP
vertices out 3

[fragment shader]
#version 120

const int gs_VerticesIn = 3;

varying vec4 gs_out;

void main()
{
  gl_FragColor = gs_out;
}

[vertex data]
vertex/float/2
-1.0 -1.0
 1.0 -1.0
 1.0  1.0
-1.0  1.0

[test]
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgba 0.5 0.5 0.5 0.5
