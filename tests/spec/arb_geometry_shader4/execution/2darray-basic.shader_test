#Basic test of gs 2d input arrays
[require]
GL >= 2.0
GLSL >= 1.20
GL_ARB_geometry_shader4

[vertex shader]
#version 120

attribute vec4 vertex;
attribute float offset;

varying float gs_input[6];
varying float gs_offset;

void main()
{
	for (int i = 0; i < 6; i++)
		gs_input[i] = offset + float(i);
	gs_offset = offset;
	gl_Position = vertex;
}

[geometry shader]
#version 120
#extension GL_ARB_geometry_shader4: enable

uniform int zero;

varying in float gs_offset[];
varying in float gs_input[][6];

varying out float fs_ok;

void main()
{
	bool ok = true;

	for (int i = 0; i < gl_VerticesIn; i++) {
		for (int j = 0; j < 6; j++) {
			if (gs_input[i][j] != gs_offset[i] + float(j))
				ok = false;
		}
	}

	for (int i = 0; i < gl_VerticesIn; i++) {
		fs_ok = float(ok);
		gl_Position = gl_PositionIn[i];
		EmitVertex();
	}
}

[geometry layout]
input type GL_TRIANGLES
output type GL_TRIANGLE_STRIP
vertices out 3

[fragment shader]
#version 120

const int gs_VerticesIn = 3;

varying float fs_ok;

void main()
{
	if (distance(fs_ok, 1.0) < 1e-6)
		gl_FragColor = vec4(0, 1, 0, 1);
	else
		gl_FragColor = vec4(1, 0, 0, 1);
}

[vertex data]
vertex/float/2  offset/float/1
-1.0 -1.0       1.0
 1.0 -1.0       2.0
 1.0  1.0       3.0
-1.0  1.0       4.0

[test]
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgb 0 1 0
