# Test accessing glTexCoordIn without redeclaration but with constant indices.
#
# From the ARB_geometry_shader4 spec (section ):
# "Indices used to subscript gl_TexCoord must either be an integral constant
# expressions, or this array must be re-declared by the shader with a size."
[require]
GL >= 2.0
GLSL >= 1.10
GL_ARB_geometry_shader4

[vertex shader]
#version 110

attribute vec4 vertex;
attribute float offset;

varying float gs_offset;

void main()
{
	gl_TexCoord[0] = vec4(offset + float(0));
	gl_TexCoord[1] = vec4(offset + float(1));
	gl_TexCoord[2] = vec4(offset + float(2));
	gs_offset = offset;
	gl_Position = vertex;
}

[geometry shader]
#version 110
#extension GL_ARB_geometry_shader4: enable

varying in float gs_offset[];

varying out float fs_ok;

void main()
{
	bool ok = true;

	if (gl_TexCoordIn[0][0] != vec4(gs_offset[0] + float(0)))
		ok = false;
	if (gl_TexCoordIn[0][1] != vec4(gs_offset[0] + float(1)))
		ok = false;
	if (gl_TexCoordIn[1][0] != vec4(gs_offset[1] + float(0)))
		ok = false;
	if (gl_TexCoordIn[1][1] != vec4(gs_offset[1] + float(1)))
		ok = false;
	if (gl_TexCoordIn[2][0] != vec4(gs_offset[2] + float(0)))
		ok = false;
	if (gl_TexCoordIn[2][1] != vec4(gs_offset[2] + float(1)))
		ok = false;

	for (int i = 0; i < 3; ++i) {
		fs_ok = float(ok);
		gl_Position = gl_PositionIn[i];
		EmitVertex();
	}
}

[geometry layout]
input type GL_TRIANGLES
output type GL_TRIANGLE_STRIP
vertices out 3

[fragment shader]
#version 110

varying float fs_ok;

void main()
{
	if (distance(fs_ok, 1.0) < 1e-6)
		gl_FragColor = vec4(0, 1, 0, 1);
	else
		gl_FragColor = vec4(1, 0, 0, 1);
}

[vertex data]
vertex/float/2  offset/float/1
-1.0 -1.0       1.0
 1.0 -1.0       2.0
 1.0  1.0       3.0
-1.0  1.0       4.0

[test]
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgb 0 1 0
