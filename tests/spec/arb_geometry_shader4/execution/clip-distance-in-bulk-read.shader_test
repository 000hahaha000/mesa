# This test checks that the geometry shader can read an entire
# float[gl_MaxClipDistances] component of gl_ClipDistanceIn using a
# single bulk assignment.

[require]
GL >= 2.0
GLSL >= 1.30
GL_ARB_geometry_shader4

[vertex shader]
#version 130

in vec4 vertex;
in float offset;
out float offset_to_gs;
out float gl_ClipDistance[gl_MaxClipDistances];

void main()
{
  gl_Position = vertex;
  offset_to_gs = offset;
  for (int i = 0; i < gl_MaxClipDistances; i++) {
    gl_ClipDistance[i] = offset + float(i);
  }
}

[geometry shader]
#version 130
#extension GL_ARB_geometry_shader4: enable

in float offset_to_gs[3];
in float gl_ClipDistanceIn[3][gl_MaxClipDistances];
flat out int ok_to_fs;
uniform float foo;

void main()
{
  bool ok = true;
  for (int i = 0; i < 3; i++) {
    float clip_distance_copy[gl_MaxClipDistances] = gl_ClipDistanceIn[i];

    /* Make sure the copy doesn't get optimized out */
    clip_distance_copy[0] += foo;

    for (int j = 0; j < gl_MaxClipDistances; j++) {
      if (clip_distance_copy[j] != offset_to_gs[i] + float(j))
        ok = false;
    }
  }
  for (int i = 0; i < 3; i++) {
    gl_Position = gl_PositionIn[i];
    ok_to_fs = int(ok);
    EmitVertex();
  }
}

[geometry layout]
input type GL_TRIANGLES
output type GL_TRIANGLE_STRIP
vertices out 3

[fragment shader]
#version 130

flat in int ok_to_fs;

void main()
{
  if (ok_to_fs != 0)
    gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);
  else
    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}

[vertex data]
vertex/float/2  offset/float/1
-1.0 -1.0       1.0
 1.0 -1.0       2.0
 1.0  1.0       3.0
-1.0  1.0       4.0

[test]
uniform float foo 0.0
draw arrays GL_TRIANGLE_FAN 0 4
probe all rgba 0.0 1.0 0.0 1.0
