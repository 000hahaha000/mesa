# Use 4 gl_CullDistance values to "cull" away some vertices with negative values
# supplied to gl_CullDistance.
#
# The gl_CullDistance variable provides a mechanism for controlling user
# culling. The element gl_CullDistance[i] specifies a cull distance for each
# plane i. A distance of 0.0 means that the vertex is on the plane, a positive
# distance means that the vertex is insider the cull volume, and a negative
# distance means that the point is outside the cull volume. Primitives whose
# vertices all have a negative clip distance for plane i will be discarded.

[require]
GLSL >= 1.30
GL_ARB_cull_distance

[vertex shader]
#version 130
#extension GL_ARB_cull_distance: enable

out float gl_CullDistance[4];

void main(void)
{
         gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;

         // Compute 2D cordinates relative to a center point of (0.5,
         // 0.5).
         vec2 coord = gl_Vertex.xy - vec2(0.5, 0.5);

         for (int i = 0; i < 4; ++i) {
                  uint j = uint(i);

                  // Compute a unit vector in the direction i*45deg from
                  // the x axis.
                  float angle = i*(3.141592653589793/4);
                  vec2 u = vec2(cos(angle), sin(angle));

                  gl_CullDistance[j] = -0.5 - dot(u, coord);
         }
}

[fragment shader]
#version 130

void main(void)
{
         gl_FragColor = vec4(0, 1, 1, 1);
}

[test]
clear color 0.0 1.0 0.0 1.0
clear
ortho 0 2 0 2
draw rect 0.0 0.0 1.0 1.0

relative probe rgba (0.100, 0.100) (0.0, 1.0, 1.0, 1.0)
relative probe rgba (0.900, 0.900) (0.0, 1.0, 0.0, 1.0)
