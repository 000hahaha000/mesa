# Regression checking test for load/store shared support for nir
# schedule

[require]
GL ES >= 3.1
GLSL ES >= 3.10


[compute shader]
#version 310 es

layout(local_size_x = 64) in;

layout(binding = 0, std430) buffer bufblock {
	int ssbo_data[4];
};

// This ssbo is just used to add padding instructions.

layout(binding = 1, std430) buffer bufblock_pad {
	int ssbo_pad_data[4];
};

shared int shared_data[4];

shared int value;

layout(binding = 0) uniform atomic_uint fail;

void main()
{
	shared_data = int[4](1, 2, 3, 4);

	barrier();

	// This would use load_shared with the info that will be
	// copied to the ssbo.

	int local_copy[4] = shared_data;

	// Fillers. TODO: perhaps we would need more to be a test more resilient
	ssbo_pad_data[0] = 20;
	ssbo_pad_data[1] = 21;

	// What we want to check if that the scheduler doesn't move
	// the previous load_shared after this store_shared call

	shared_data[0] = 5;

	// Fillers. TODO: perhaps we would need more to be a test more resilient
	ssbo_pad_data[2] = 22;
	ssbo_pad_data[3] = 23;

	ssbo_data = local_copy;
}

[test]
ssbo 0 64
ssbo 0 subdata int 0   9
ssbo 0 subdata int 4   10
ssbo 0 subdata int 8   11
ssbo 0 subdata int 12  12

ssbo 1 64

compute 2 3 4

probe ssbo int 0 0  == 1
probe ssbo int 0 4  == 2
probe ssbo int 0 8  == 3
probe ssbo int 0 12 == 4

probe ssbo int 1 0  == 20
probe ssbo int 1 4  == 21
probe ssbo int 1 8  == 22
probe ssbo int 1 12 == 23
