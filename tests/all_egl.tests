import re
import shlex

from framework.core import *
from framework.exectest import *

def plain_test(args):
    return PlainExecTest(shlex.split(args) + ['-auto'])

profile = TestProfile()

egl = Group()
profile.tests['egl'] = egl
egl['egl-create-surface'] = plain_test('egl-create-surface')
egl['egl-nok-swap-region'] = plain_test('egl-nok-swap-region')
egl['egl-nok-texture-from-pixmap'] = plain_test('egl-nok-texture-from-pixmap')

# Ignore these Mesa diagnostic messages.
Test.ignoreErrors.append(re.compile("couldn't open libtxc_dxtn.so"))
Test.ignoreErrors.append(re.compile("compression/decompression available"))
Test.ignoreErrors.append(re.compile("Mesa: .*build"))
Test.ignoreErrors.append(re.compile("Mesa: CPU.*"))
Test.ignoreErrors.append(re.compile("Mesa: .*cpu detected."))
Test.ignoreErrors.append(re.compile("Mesa: Test.*"))
Test.ignoreErrors.append(re.compile("Mesa: Yes.*"))
Test.ignoreErrors.append(re.compile("libGL: XF86DRIGetClientDriverName.*"))
Test.ignoreErrors.append(re.compile("libGL: OpenDriver: trying.*"))
Test.ignoreErrors.append(re.compile("libGL: Warning in.*drirc*"))
Test.ignoreErrors.append(re.compile("ATTENTION.*value of option.*"))
Test.ignoreErrors.append(re.compile("drmOpen.*"))
Test.ignoreErrors.append(re.compile("Mesa: Not testing OS support.*"))
Test.ignoreErrors.append(re.compile("Mesa: User error:.*"))
Test.ignoreErrors.append(re.compile("Mesa: Initializing .* optimizations"))
Test.ignoreErrors.append(re.compile("debug_get_.*"))
Test.ignoreErrors.append(re.compile("util_cpu_caps.*"))
Test.ignoreErrors.append(re.compile("Mesa: 3Dnow! detected"))
Test.ignoreErrors.append(re.compile("r300:.*"))
Test.ignoreErrors.append(re.compile("radeon:.*"))
Test.ignoreErrors.append(re.compile("Warning:.*"))
Test.ignoreErrors.append(re.compile("0 errors, .*"))
Test.ignoreErrors.append(re.compile("Mesa.*"))
Test.ignoreErrors.append(re.compile("no rrb"))
Test.ignoreErrors.append(re.compile("; ModuleID.*"))
Test.ignoreErrors.append(re.compile("%.*"))
Test.ignoreErrors.append(re.compile(".*failed to translate tgsi opcode.*to SSE"))
Test.ignoreErrors.append(re.compile(".*falling back to interpreter"))
Test.ignoreErrors.append(re.compile("GLSL version is .*, but requested version .* is required"))
Test.ignoreErrors.append(re.compile("kCGErrorIllegalArgument: CGSOrderWindowList"))
Test.ignoreErrors.append(re.compile("kCGErrorFailure: Set a breakpoint @ CGErrorBreakpoint\(\) to catch errors as they are logged."))
Test.ignoreErrors.append(re.compile("stw_(init|cleanup).*"))
Test.ignoreErrors.append(re.compile("OpenGLInfo..*"))
Test.ignoreErrors.append(re.compile("AdapterInfo..*"))
Test.ignoreErrors.append(re.compile("No memory leaks detected."))
