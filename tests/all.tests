#!/usr/bin/python
# All tests that come with piglit, using default settings

import re
import subprocess

from framework.core import *
from framework.exectest import *
from framework.gleantest import *

######
# Collecting all tests
profile = TestProfile()

glean = Group()
glean['basic'] = GleanTest('basic')
glean['api2'] = GleanTest('api2')
glean['makeCurrent'] = GleanTest('makeCurrent')
glean['blendFunc'] = GleanTest('blendFunc')
glean['depthStencil'] = GleanTest('depthStencil')
glean['fbo'] = GleanTest('fbo')
glean['fpexceptions'] = GleanTest('fpexceptions')
glean['fragProg1'] = GleanTest('fragProg1')
glean['getString'] = GleanTest('getString')
glean['glsl1'] = GleanTest('glsl1')
glean['logicOp'] = GleanTest('logicOp')
glean['maskedClear'] = GleanTest('maskedClear')
glean['occluquery'] = GleanTest('occluQry')
glean['orthoPosRandTris'] = GleanTest('orthoPosRandTris')
glean['orthoPosRandRects'] = GleanTest('orthoPosRandRects')
glean['orthoPosTinyQuads'] = GleanTest('orthoPosTinyQuads')
glean['orthoPosHLines'] = GleanTest('orthoPosHLines')
glean['orthoPosVLines'] = GleanTest('orthoPosVLines')
glean['orthoPosPoints'] = GleanTest('orthoPosPoints')
glean['paths'] = GleanTest('paths')
glean['pbo'] = GleanTest('pbo')
glean['polygonOffset'] = GleanTest('polygonOffset')
glean['pixelFormats'] = GleanTest('pixelFormats')
glean['pointAtten'] = GleanTest('pointAtten')
glean['pointSprite'] = GleanTest('pointSprite')
glean['exactRGBA'] = GleanTest('exactRGBA')
glean['readPixSanity'] = GleanTest('readPixSanity')
glean['rgbTriStrip'] = GleanTest('rgbTriStrip')
glean['scissor'] = GleanTest('scissor')
glean['teapot'] = GleanTest('teapot')
glean['texCombine'] = GleanTest('texCombine')
glean['texCube'] = GleanTest('texCube')
glean['texEnv'] = GleanTest('texEnv')
glean['texgen'] = GleanTest('texgen')
glean['texRect'] = GleanTest('texRect')
glean['texCombine4'] = GleanTest('texCombine4')
glean['texSwizzle'] = GleanTest('texSwizzle')
glean['texture_srgb'] = GleanTest('texture_srgb')
glean['texUnits'] = GleanTest('texUnits')
glean['vertArrayBGRA'] = GleanTest('vertArrayBGRA')
glean['vertattrib'] = GleanTest('vertattrib')
glean['vertProg1'] = GleanTest('vertProg1')

mesa = Group()
mesa['crossbar'] = PlainExecTest([testBinDir + 'crossbar', '-auto'])

general = Group()
general['linestipple'] = PlainExecTest([testBinDir + 'linestipple', '-auto'])
general['texgen'] = PlainExecTest([testBinDir + 'texgen', '-auto'])
general['varray-disabled'] = PlainExecTest([testBinDir + 'varray-disabled', '-auto'])
general['windowoverlap'] = PlainExecTest([testBinDir + 'windowoverlap', '-auto'])

shaders = Group()
shaders['trinity-fp1'] = PlainExecTest([testBinDir + 'trinity-fp1', '-auto'])
shaders['fp-lit-mask'] = PlainExecTest([testBinDir + 'fp-lit-mask', '-auto'])
shaders['fp-fragment-position'] = PlainExecTest([testBinDir + 'fp-fragment-position', '-auto'])
shaders['fp-kil'] = PlainExecTest([testBinDir + 'fp-kil', '-auto'])
shaders['fp-incomplete-tex'] = PlainExecTest([testBinDir + 'fp-incomplete-tex', '-auto'])
shaders['fp-indirections'] = PlainExecTest([testBinDir + 'fp-indirections', '-auto'])
shaders['vp-bad-program'] = PlainExecTest([testBinDir + 'vp-bad-program', '-auto'])

fpgeneric = Group()
def make_fpgeneric(name):
	return PlainExecTest([testBinDir + 'fp-generic', testBinDir + '../tests/shaders/generic/' + name])
fpgeneric['dph'] = make_fpgeneric('dph.fp')
fpgeneric['kil-swizzle'] = make_fpgeneric('kil-swizzle.fp')
fpgeneric['lrp_sat'] = make_fpgeneric('lrp_sat.fp')
shaders['fp-generic'] = fpgeneric

bugs = Group()
bugs['crash-cubemap-order'] = PlainExecTest([testBinDir + 'crash-cubemap-order'])
bugs['crash-texparameter-before-teximage'] = PlainExecTest([testBinDir + 'crash-texparameter-before-teximage', '-auto'])
bugs['fdo9833'] = PlainExecTest([testBinDir + 'fdo9833', '-auto'])
bugs['fdo10370'] = PlainExecTest([testBinDir + 'fdo10370', '-auto'])
bugs['fdo14575'] = PlainExecTest([testBinDir + 'fdo14575', '-auto'])
bugs['r300-readcache'] = PlainExecTest([testBinDir + 'r300-readcache'])
bugs['tex1d-2dborder'] = PlainExecTest([testBinDir + 'tex1d-2dborder', '-auto'])

texturing = Group()
texturing['copytexsubimage'] = PlainExecTest([testBinDir + 'copytexsubimage', '-auto'])
texturing['cubemap'] = PlainExecTest([testBinDir + 'cubemap', '-auto'])
texturing['gen-teximage'] = PlainExecTest([testBinDir + 'gen-teximage', '-auto'])
texturing['gen-texsubimage'] = PlainExecTest([testBinDir + 'gen-texsubimage', '-auto'])
texturing['getteximage-simple'] = PlainExecTest([testBinDir + 'getteximage-simple', '-auto'])
texturing['lodbias'] = PlainExecTest([testBinDir + 'lodbias', '-auto'])
texturing['tex3d'] = PlainExecTest([testBinDir + 'tex3d'])
texturing['texdepth'] = PlainExecTest([testBinDir + 'texdepth', '-auto'])
texturing['texrect-many'] = PlainExecTest([testBinDir + 'texrect-many', '-auto'])
texturing['texredefine'] = PlainExecTest([testBinDir + 'texredefine', '-auto'])
texturing['tfp'] = PlainExecTest([testBinDir + 'tfp', '-auto'])

profile.tests['bugs'] = bugs
profile.tests['general'] = general
profile.tests['glean'] = glean
profile.tests['mesa'] = mesa
profile.tests['shaders'] = shaders
profile.tests['texturing'] = texturing

#############
# Some Mesa diagnostic messages that we should probably ignore
Test.ignoreErrors.append(re.compile("couldn't open libtxc_dxtn.so"))
Test.ignoreErrors.append(re.compile("compression/decompression available"))
Test.ignoreErrors.append(re.compile("Mesa: .*build"))
Test.ignoreErrors.append(re.compile("Mesa: CPU.*"))
Test.ignoreErrors.append(re.compile("Mesa: .*cpu detected."))
Test.ignoreErrors.append(re.compile("Mesa: Test.*"))
Test.ignoreErrors.append(re.compile("Mesa: Yes.*"))
Test.ignoreErrors.append(re.compile("libGL: XF86DRIGetClientDriverName.*"))
Test.ignoreErrors.append(re.compile("libGL: OpenDriver: trying.*"))
Test.ignoreErrors.append(re.compile("drmOpen.*"))
Test.ignoreErrors.append(re.compile("Mesa: Not testing OS support.*"))
Test.ignoreErrors.append(re.compile("Mesa: User error:.*"))

